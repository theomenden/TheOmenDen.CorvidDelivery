// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace TheOmenDen.CorvidDelivery.TiltifyApi.Oauth.Authorize {
    /// <summary>
    /// Builds and executes requests for operations under \oauth\authorize
    /// </summary>
    public class AuthorizeRequestBuilder : BaseRequestBuilder {
        /// <summary>
        /// Instantiates a new <see cref="AuthorizeRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AuthorizeRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&response_type={response_type}{&scope*}", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new <see cref="AuthorizeRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AuthorizeRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&response_type={response_type}{&scope*}", rawUrl) {
        }
        /// <summary>
        /// Returns a `code` through the applications `redirect_uri` to be used with the `/token` with the `authorization_code` grant.
        /// </summary>
        /// <returns>A <see cref="Stream"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Stream?> GetAsync(Action<RequestConfiguration<AuthorizeRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<Stream> GetAsync(Action<RequestConfiguration<AuthorizeRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a `code` through the applications `redirect_uri` to be used with the `/token` with the `authorization_code` grant.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<AuthorizeRequestBuilderGetQueryParameters>>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<AuthorizeRequestBuilderGetQueryParameters>> requestConfiguration = default) {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="AuthorizeRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public AuthorizeRequestBuilder WithUrl(string rawUrl) {
            return new AuthorizeRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a `code` through the applications `redirect_uri` to be used with the `/token` with the `authorization_code` grant.
        /// </summary>
        public class AuthorizeRequestBuilderGetQueryParameters {
            /// <summary>Client Id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("client_id")]
            public string? ClientId { get; set; }
#nullable restore
#else
            [QueryParameter("client_id")]
            public string ClientId { get; set; }
#endif
            /// <summary>Redirect URI</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("redirect_uri")]
            public string? RedirectUri { get; set; }
#nullable restore
#else
            [QueryParameter("redirect_uri")]
            public string RedirectUri { get; set; }
#endif
            /// <summary>Response Type</summary>
            [Obsolete("This property is deprecated, use ResponseTypeAsGetResponseTypeQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("response_type")]
            public string? ResponseType { get; set; }
#nullable restore
#else
            [QueryParameter("response_type")]
            public string ResponseType { get; set; }
#endif
            /// <summary>Response Type</summary>
            [QueryParameter("response_type")]
            public GetResponse_typeQueryParameterType? ResponseTypeAsGetResponseTypeQueryParameterType { get; set; }
            /// <summary>Scope</summary>
            [Obsolete("This property is deprecated, use ScopeAsGetScopeQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("scope")]
            public string? Scope { get; set; }
#nullable restore
#else
            [QueryParameter("scope")]
            public string Scope { get; set; }
#endif
            /// <summary>Scope</summary>
            [QueryParameter("scope")]
            public GetScopeQueryParameterType? ScopeAsGetScopeQueryParameterType { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class AuthorizeRequestBuilderGetRequestConfiguration : RequestConfiguration<AuthorizeRequestBuilderGetQueryParameters> {
        }
    }
}
