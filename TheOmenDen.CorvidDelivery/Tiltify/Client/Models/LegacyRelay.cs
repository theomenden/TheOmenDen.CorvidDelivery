// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace TheOmenDen.CorvidDelivery.TiltifyApi.Models {
    [Obsolete("")]
    public class LegacyRelay : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Monetary amount</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Amount { get; set; }
#nullable restore
#else
        public string Amount { get; set; }
#endif
        /// <summary>Wether the donation is anonymous or not</summary>
        public bool? Anonymous { get; set; }
        /// <summary>Monetary amount</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CurrencyCode { get; set; }
#nullable restore
#else
        public string CurrencyCode { get; set; }
#endif
        /// <summary>The donors Comment</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DonorComment { get; set; }
#nullable restore
#else
        public string DonorComment { get; set; }
#endif
        /// <summary>The donors name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DonorName { get; set; }
#nullable restore
#else
        public string DonorName { get; set; }
#endif
        /// <summary>The providers metadata</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Meta { get; set; }
#nullable restore
#else
        public string Meta { get; set; }
#endif
        /// <summary>The status of the donation</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PaymentStatus { get; set; }
#nullable restore
#else
        public string PaymentStatus { get; set; }
#endif
        /// <summary>The providers UUID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Uuid { get; set; }
#nullable restore
#else
        public string Uuid { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="LegacyRelay"/> and sets the default values.
        /// </summary>
        public LegacyRelay() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="LegacyRelay"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static LegacyRelay CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new LegacyRelay();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"amount", n => { Amount = n.GetStringValue(); } },
                {"anonymous", n => { Anonymous = n.GetBoolValue(); } },
                {"currency_code", n => { CurrencyCode = n.GetStringValue(); } },
                {"donor_comment", n => { DonorComment = n.GetStringValue(); } },
                {"donor_name", n => { DonorName = n.GetStringValue(); } },
                {"meta", n => { Meta = n.GetStringValue(); } },
                {"payment_status", n => { PaymentStatus = n.GetStringValue(); } },
                {"uuid", n => { Uuid = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("amount", Amount);
            writer.WriteBoolValue("anonymous", Anonymous);
            writer.WriteStringValue("currency_code", CurrencyCode);
            writer.WriteStringValue("donor_comment", DonorComment);
            writer.WriteStringValue("donor_name", DonorName);
            writer.WriteStringValue("meta", Meta);
            writer.WriteStringValue("payment_status", PaymentStatus);
            writer.WriteStringValue("uuid", Uuid);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
