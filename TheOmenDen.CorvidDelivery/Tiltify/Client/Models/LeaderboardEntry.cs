// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace TheOmenDen.CorvidDelivery.TiltifyApi.Models {
    public class LeaderboardEntry : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The total amount raised by this leaderboard entry.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public LeaderboardEntry_amount? Amount { get; set; }
#nullable restore
#else
        public LeaderboardEntry_amount Amount { get; set; }
#endif
        /// <summary>An Image includes the html properties necessary to render an &lt;img&gt; tag</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Image? Avatar { get; set; }
#nullable restore
#else
        public Image Avatar { get; set; }
#endif
        /// <summary>The change in place of this entry</summary>
        public double? Heat { get; set; }
        /// <summary>Unique Identifier for the Object. UUID</summary>
        public Guid? Id { get; set; }
        /// <summary>The team&apos;s name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>This is the full url for the team profile.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="LeaderboardEntry"/> and sets the default values.
        /// </summary>
        public LeaderboardEntry() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="LeaderboardEntry"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static LeaderboardEntry CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new LeaderboardEntry();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"amount", n => { Amount = n.GetObjectValue<LeaderboardEntry_amount>(LeaderboardEntry_amount.CreateFromDiscriminatorValue); } },
                {"avatar", n => { Avatar = n.GetObjectValue<Image>(Image.CreateFromDiscriminatorValue); } },
                {"heat", n => { Heat = n.GetDoubleValue(); } },
                {"id", n => { Id = n.GetGuidValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"url", n => { Url = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<LeaderboardEntry_amount>("amount", Amount);
            writer.WriteObjectValue<Image>("avatar", Avatar);
            writer.WriteDoubleValue("heat", Heat);
            writer.WriteGuidValue("id", Id);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("url", Url);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="MeasuredUnit"/>, <see cref="Money"/>
        /// </summary>
        public class LeaderboardEntry_amount : IComposedTypeWrapper, IParsable {
            /// <summary>Composed type representation for type <see cref="TheOmenDen.CorvidDelivery.TiltifyApi.Models.MeasuredUnit"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public TheOmenDen.CorvidDelivery.TiltifyApi.Models.MeasuredUnit? MeasuredUnit { get; set; }
#nullable restore
#else
            public TheOmenDen.CorvidDelivery.TiltifyApi.Models.MeasuredUnit MeasuredUnit { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="TheOmenDen.CorvidDelivery.TiltifyApi.Models.Money"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public TheOmenDen.CorvidDelivery.TiltifyApi.Models.Money? Money { get; set; }
#nullable restore
#else
            public TheOmenDen.CorvidDelivery.TiltifyApi.Models.Money Money { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="LeaderboardEntry_amount"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static LeaderboardEntry_amount CreateFromDiscriminatorValue(IParseNode parseNode) {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new LeaderboardEntry_amount();
                if("MeasuredUnit".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                    result.MeasuredUnit = new TheOmenDen.CorvidDelivery.TiltifyApi.Models.MeasuredUnit();
                }
                else if("Money".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                    result.Money = new TheOmenDen.CorvidDelivery.TiltifyApi.Models.Money();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
                if(MeasuredUnit != null) {
                    return MeasuredUnit.GetFieldDeserializers();
                }
                else if(Money != null) {
                    return Money.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer) {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(MeasuredUnit != null) {
                    writer.WriteObjectValue<TheOmenDen.CorvidDelivery.TiltifyApi.Models.MeasuredUnit>(null, MeasuredUnit);
                }
                else if(Money != null) {
                    writer.WriteObjectValue<TheOmenDen.CorvidDelivery.TiltifyApi.Models.Money>(null, Money);
                }
            }
        }
    }
}
