// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace TheOmenDen.CorvidDelivery.TiltifyApi.Models {
    public class Cause : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>An Image includes the html properties necessary to render an &lt;img&gt; tag</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Image? Avatar { get; set; }
#nullable restore
#else
        public Image Avatar { get; set; }
#endif
        /// <summary>The contact property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Cause_contact? Contact { get; set; }
#nullable restore
#else
        public Cause_contact Contact { get; set; }
#endif
        /// <summary>The currency code used by this cause.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CurrencyCode { get; set; }
#nullable restore
#else
        public string CurrencyCode { get; set; }
#endif
        /// <summary>A description about this cause</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The government id of this cause.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? GovernmentId { get; set; }
#nullable restore
#else
        public string GovernmentId { get; set; }
#endif
        /// <summary>Unique Identifier for the Object. UUID</summary>
        public Guid? Id { get; set; }
        /// <summary>When the cause was created</summary>
        public DateTimeOffset? InsertedAt { get; set; }
        /// <summary>Legacy numeric ID of the object. If your app is dependent on this field, please migrate to id. This will be deprecated in the next version of the API.</summary>
        [Obsolete("")]
        public double? LegacyId { get; set; }
        /// <summary>The cause name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>A short description about this cause</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ShortDescription { get; set; }
#nullable restore
#else
        public string ShortDescription { get; set; }
#endif
        /// <summary>This is a url slug used for the given resource.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Slug { get; set; }
#nullable restore
#else
        public string Slug { get; set; }
#endif
        /// <summary>An object with various social usernames and links</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public TheOmenDen.CorvidDelivery.TiltifyApi.Models.Social? Social { get; set; }
#nullable restore
#else
        public TheOmenDen.CorvidDelivery.TiltifyApi.Models.Social Social { get; set; }
#endif
        /// <summary>When the cause details were last updated</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="Cause"/> and sets the default values.
        /// </summary>
        public Cause() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Cause"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Cause CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Cause();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"avatar", n => { Avatar = n.GetObjectValue<Image>(Image.CreateFromDiscriminatorValue); } },
                {"contact", n => { Contact = n.GetObjectValue<Cause_contact>(Cause_contact.CreateFromDiscriminatorValue); } },
                {"currency_code", n => { CurrencyCode = n.GetStringValue(); } },
                {"description", n => { Description = n.GetStringValue(); } },
                {"government_id", n => { GovernmentId = n.GetStringValue(); } },
                {"id", n => { Id = n.GetGuidValue(); } },
                {"inserted_at", n => { InsertedAt = n.GetDateTimeOffsetValue(); } },
                {"legacy_id", n => { LegacyId = n.GetDoubleValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"short_description", n => { ShortDescription = n.GetStringValue(); } },
                {"slug", n => { Slug = n.GetStringValue(); } },
                {"social", n => { Social = n.GetObjectValue<TheOmenDen.CorvidDelivery.TiltifyApi.Models.Social>(TheOmenDen.CorvidDelivery.TiltifyApi.Models.Social.CreateFromDiscriminatorValue); } },
                {"updated_at", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<Image>("avatar", Avatar);
            writer.WriteObjectValue<Cause_contact>("contact", Contact);
            writer.WriteStringValue("currency_code", CurrencyCode);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("government_id", GovernmentId);
            writer.WriteGuidValue("id", Id);
            writer.WriteDateTimeOffsetValue("inserted_at", InsertedAt);
            writer.WriteDoubleValue("legacy_id", LegacyId);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("short_description", ShortDescription);
            writer.WriteStringValue("slug", Slug);
            writer.WriteObjectValue<TheOmenDen.CorvidDelivery.TiltifyApi.Models.Social>("social", Social);
            writer.WriteDateTimeOffsetValue("updated_at", UpdatedAt);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
