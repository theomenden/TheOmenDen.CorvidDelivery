// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace TheOmenDen.CorvidDelivery.TiltifyApi.Models {
    public class DonationMatch : IAdditionalDataHolder, IParsable {
        /// <summary>Whether or not the donation match is active</summary>
        public bool? Active { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The amount of the donation match.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Money? Amount { get; set; }
#nullable restore
#else
        public Money Amount { get; set; }
#endif
        /// <summary>Moment when the donation match completed</summary>
        public DateTimeOffset? CompletedAt { get; set; }
        /// <summary>Unique Identifier for the donation matches donation.</summary>
        public Guid? DonationId { get; set; }
        /// <summary>Moment when the donation match ends</summary>
        public DateTimeOffset? EndsAt { get; set; }
        /// <summary>Unique Identifier for the donation match.</summary>
        public Guid? Id { get; set; }
        /// <summary>Moment when the donation match was created</summary>
        public DateTimeOffset? InsertedAt { get; set; }
        /// <summary>The name of the person who started the donation match</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MatchedBy { get; set; }
#nullable restore
#else
        public string MatchedBy { get; set; }
#endif
        /// <summary>The type of the match, either &apos;all&apos; or &apos;amount&apos;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MatchType { get; set; }
#nullable restore
#else
        public string MatchType { get; set; }
#endif
        /// <summary>The amount the donation match has pledged.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Money? PledgedAmount { get; set; }
#nullable restore
#else
        public Money PledgedAmount { get; set; }
#endif
        /// <summary>The amount raised the campaign had when the donation match was started.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Money? StartedAtAmount { get; set; }
#nullable restore
#else
        public Money StartedAtAmount { get; set; }
#endif
        /// <summary>Moment when the donation match starts</summary>
        public DateTimeOffset? StartsAt { get; set; }
        /// <summary>The amount the donation match has raised.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Money? TotalAmountRaised { get; set; }
#nullable restore
#else
        public Money TotalAmountRaised { get; set; }
#endif
        /// <summary>Moment when the donation match was last updated</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="DonationMatch"/> and sets the default values.
        /// </summary>
        public DonationMatch() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="DonationMatch"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static DonationMatch CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new DonationMatch();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"active", n => { Active = n.GetBoolValue(); } },
                {"amount", n => { Amount = n.GetObjectValue<Money>(Money.CreateFromDiscriminatorValue); } },
                {"completed_at", n => { CompletedAt = n.GetDateTimeOffsetValue(); } },
                {"donation_id", n => { DonationId = n.GetGuidValue(); } },
                {"ends_at", n => { EndsAt = n.GetDateTimeOffsetValue(); } },
                {"id", n => { Id = n.GetGuidValue(); } },
                {"inserted_at", n => { InsertedAt = n.GetDateTimeOffsetValue(); } },
                {"match_type", n => { MatchType = n.GetStringValue(); } },
                {"matched_by", n => { MatchedBy = n.GetStringValue(); } },
                {"pledged_amount", n => { PledgedAmount = n.GetObjectValue<Money>(Money.CreateFromDiscriminatorValue); } },
                {"started_at_amount", n => { StartedAtAmount = n.GetObjectValue<Money>(Money.CreateFromDiscriminatorValue); } },
                {"starts_at", n => { StartsAt = n.GetDateTimeOffsetValue(); } },
                {"total_amount_raised", n => { TotalAmountRaised = n.GetObjectValue<Money>(Money.CreateFromDiscriminatorValue); } },
                {"updated_at", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("active", Active);
            writer.WriteObjectValue<Money>("amount", Amount);
            writer.WriteDateTimeOffsetValue("completed_at", CompletedAt);
            writer.WriteGuidValue("donation_id", DonationId);
            writer.WriteDateTimeOffsetValue("ends_at", EndsAt);
            writer.WriteGuidValue("id", Id);
            writer.WriteDateTimeOffsetValue("inserted_at", InsertedAt);
            writer.WriteStringValue("matched_by", MatchedBy);
            writer.WriteStringValue("match_type", MatchType);
            writer.WriteObjectValue<Money>("pledged_amount", PledgedAmount);
            writer.WriteObjectValue<Money>("started_at_amount", StartedAtAmount);
            writer.WriteDateTimeOffsetValue("starts_at", StartsAt);
            writer.WriteObjectValue<Money>("total_amount_raised", TotalAmountRaised);
            writer.WriteDateTimeOffsetValue("updated_at", UpdatedAt);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
