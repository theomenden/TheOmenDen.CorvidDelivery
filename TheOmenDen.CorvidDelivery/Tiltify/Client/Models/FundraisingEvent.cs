// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace TheOmenDen.CorvidDelivery.TiltifyApi.Models {
    public class FundraisingEvent : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>An Image includes the html properties necessary to render an &lt;img&gt; tag</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Image? Avatar { get; set; }
#nullable restore
#else
        public Image Avatar { get; set; }
#endif
        /// <summary>The datetime the campaign will allow supporting campaigns to be published in ISO 8601 format</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CanPublishSupportingAt { get; set; }
#nullable restore
#else
        public string CanPublishSupportingAt { get; set; }
#endif
        /// <summary>The ID for a Cause that owns this fundraising event.</summary>
        public Guid? CauseId { get; set; }
        /// <summary>The currency code used by this fundraising event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CurrencyCode { get; set; }
#nullable restore
#else
        public string CurrencyCode { get; set; }
#endif
        /// <summary>A short description about this fundraising event</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>This is the donate url for the fundraising event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DonateUrl { get; set; }
#nullable restore
#else
        public string DonateUrl { get; set; }
#endif
        /// <summary>A date when this fundraising event ends.</summary>
        [Obsolete("")]
        public Date? EndsAt { get; set; }
        /// <summary>The datetime the campaign will stop accepting registrations in ISO 8601 format</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EndSupportingAt { get; set; }
#nullable restore
#else
        public string EndSupportingAt { get; set; }
#endif
        /// <summary>The current goal of the fundraising event</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Money? Goal { get; set; }
#nullable restore
#else
        public Money Goal { get; set; }
#endif
        /// <summary>Unique Identifier for the Object. UUID</summary>
        public Guid? Id { get; set; }
        /// <summary>When the fundraising event was created</summary>
        public DateTimeOffset? InsertedAt { get; set; }
        /// <summary>Legacy numeric ID of the object. If your app is dependent on this field, please migrate to id. This will be deprecated in the next version of the API.</summary>
        [Obsolete("")]
        public double? LegacyId { get; set; }
        /// <summary>The name of this fundraising event</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>When the fundraising event was last published</summary>
        public DateTimeOffset? PublishedAt { get; set; }
        /// <summary>When the fundraising event was retired</summary>
        public DateTimeOffset? RetiredAt { get; set; }
        /// <summary>This is a url slug used for the given resource.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Slug { get; set; }
#nullable restore
#else
        public string Slug { get; set; }
#endif
        /// <summary>An optional date when this fundraising event starts.</summary>
        [Obsolete("")]
        public Date? StartsAt { get; set; }
        /// <summary>The datetime the campaign will start accepting registrations in ISO 8601 format</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StartSupportingAt { get; set; }
#nullable restore
#else
        public string StartSupportingAt { get; set; }
#endif
        /// <summary>The status of this fundraising event</summary>
        public FundraisingEvent_status? Status { get; set; }
        /// <summary>The amount raised by this fundraising event and all supporting campaigns</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Money? TotalAmountRaised { get; set; }
#nullable restore
#else
        public Money TotalAmountRaised { get; set; }
#endif
        /// <summary>When the fundraising event details were last updated</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>This is the full url for the fundraising event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="FundraisingEvent"/> and sets the default values.
        /// </summary>
        public FundraisingEvent() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="FundraisingEvent"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static FundraisingEvent CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new FundraisingEvent();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"avatar", n => { Avatar = n.GetObjectValue<Image>(Image.CreateFromDiscriminatorValue); } },
                {"can_publish_supporting_at", n => { CanPublishSupportingAt = n.GetStringValue(); } },
                {"cause_id", n => { CauseId = n.GetGuidValue(); } },
                {"currency_code", n => { CurrencyCode = n.GetStringValue(); } },
                {"description", n => { Description = n.GetStringValue(); } },
                {"donate_url", n => { DonateUrl = n.GetStringValue(); } },
                {"end_supporting_at", n => { EndSupportingAt = n.GetStringValue(); } },
                {"ends_at", n => { EndsAt = n.GetDateValue(); } },
                {"goal", n => { Goal = n.GetObjectValue<Money>(Money.CreateFromDiscriminatorValue); } },
                {"id", n => { Id = n.GetGuidValue(); } },
                {"inserted_at", n => { InsertedAt = n.GetDateTimeOffsetValue(); } },
                {"legacy_id", n => { LegacyId = n.GetDoubleValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"published_at", n => { PublishedAt = n.GetDateTimeOffsetValue(); } },
                {"retired_at", n => { RetiredAt = n.GetDateTimeOffsetValue(); } },
                {"slug", n => { Slug = n.GetStringValue(); } },
                {"start_supporting_at", n => { StartSupportingAt = n.GetStringValue(); } },
                {"starts_at", n => { StartsAt = n.GetDateValue(); } },
                {"status", n => { Status = n.GetEnumValue<FundraisingEvent_status>(); } },
                {"total_amount_raised", n => { TotalAmountRaised = n.GetObjectValue<Money>(Money.CreateFromDiscriminatorValue); } },
                {"updated_at", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
                {"url", n => { Url = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<Image>("avatar", Avatar);
            writer.WriteStringValue("can_publish_supporting_at", CanPublishSupportingAt);
            writer.WriteGuidValue("cause_id", CauseId);
            writer.WriteStringValue("currency_code", CurrencyCode);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("donate_url", DonateUrl);
            writer.WriteDateValue("ends_at", EndsAt);
            writer.WriteStringValue("end_supporting_at", EndSupportingAt);
            writer.WriteObjectValue<Money>("goal", Goal);
            writer.WriteGuidValue("id", Id);
            writer.WriteDateTimeOffsetValue("inserted_at", InsertedAt);
            writer.WriteDoubleValue("legacy_id", LegacyId);
            writer.WriteStringValue("name", Name);
            writer.WriteDateTimeOffsetValue("published_at", PublishedAt);
            writer.WriteDateTimeOffsetValue("retired_at", RetiredAt);
            writer.WriteStringValue("slug", Slug);
            writer.WriteDateValue("starts_at", StartsAt);
            writer.WriteStringValue("start_supporting_at", StartSupportingAt);
            writer.WriteEnumValue<FundraisingEvent_status>("status", Status);
            writer.WriteObjectValue<Money>("total_amount_raised", TotalAmountRaised);
            writer.WriteDateTimeOffsetValue("updated_at", UpdatedAt);
            writer.WriteStringValue("url", Url);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
