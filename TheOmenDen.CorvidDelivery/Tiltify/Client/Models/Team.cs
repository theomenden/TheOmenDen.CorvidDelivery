// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace TheOmenDen.CorvidDelivery.TiltifyApi.Models {
    public class Team : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>An Image includes the html properties necessary to render an &lt;img&gt; tag</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Image? Avatar { get; set; }
#nullable restore
#else
        public Image Avatar { get; set; }
#endif
        /// <summary>The description section on a team&apos;s profile.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Unique Identifier for the Object. UUID</summary>
        public Guid? Id { get; set; }
        /// <summary>Legacy numeric ID of the object. If your app is dependent on this field, please migrate to id. This will be deprecated in the next version of the API.</summary>
        [Obsolete("")]
        public double? LegacyId { get; set; }
        /// <summary>The team&apos;s name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>This is a url slug used for the given resource.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Slug { get; set; }
#nullable restore
#else
        public string Slug { get; set; }
#endif
        /// <summary>An object with various social usernames and links</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public TheOmenDen.CorvidDelivery.TiltifyApi.Models.Social? Social { get; set; }
#nullable restore
#else
        public TheOmenDen.CorvidDelivery.TiltifyApi.Models.Social Social { get; set; }
#endif
        /// <summary>The total amount raised by this user represented in USD.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Money? TotalAmountRaised { get; set; }
#nullable restore
#else
        public Money TotalAmountRaised { get; set; }
#endif
        /// <summary>This is the full url for the team profile.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Team"/> and sets the default values.
        /// </summary>
        public Team() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Team"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Team CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Team();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"avatar", n => { Avatar = n.GetObjectValue<Image>(Image.CreateFromDiscriminatorValue); } },
                {"description", n => { Description = n.GetStringValue(); } },
                {"id", n => { Id = n.GetGuidValue(); } },
                {"legacy_id", n => { LegacyId = n.GetDoubleValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"slug", n => { Slug = n.GetStringValue(); } },
                {"social", n => { Social = n.GetObjectValue<TheOmenDen.CorvidDelivery.TiltifyApi.Models.Social>(TheOmenDen.CorvidDelivery.TiltifyApi.Models.Social.CreateFromDiscriminatorValue); } },
                {"total_amount_raised", n => { TotalAmountRaised = n.GetObjectValue<Money>(Money.CreateFromDiscriminatorValue); } },
                {"url", n => { Url = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<Image>("avatar", Avatar);
            writer.WriteStringValue("description", Description);
            writer.WriteGuidValue("id", Id);
            writer.WriteDoubleValue("legacy_id", LegacyId);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("slug", Slug);
            writer.WriteObjectValue<TheOmenDen.CorvidDelivery.TiltifyApi.Models.Social>("social", Social);
            writer.WriteObjectValue<Money>("total_amount_raised", TotalAmountRaised);
            writer.WriteStringValue("url", Url);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
