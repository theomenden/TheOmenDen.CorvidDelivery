// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace TheOmenDen.CorvidDelivery.TiltifyApi.Models {
    public class Reward : IAdditionalDataHolder, IParsable {
        /// <summary>Whether or not the reward is active</summary>
        public bool? Active { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Amount needed to claim this reward</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Money? Amount { get; set; }
#nullable restore
#else
        public Money Amount { get; set; }
#endif
        /// <summary>Short description of the reward</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Moment when the reward ends</summary>
        public DateTimeOffset? EndsAt { get; set; }
        /// <summary>The fair market value of this reward</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Money? FairMarketValue { get; set; }
#nullable restore
#else
        public Money FairMarketValue { get; set; }
#endif
        /// <summary>If the reward is highlighted ro not</summary>
        public bool? Highlighted { get; set; }
        /// <summary>Unique Identifier for the reward.</summary>
        public Guid? Id { get; set; }
        /// <summary>The image property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public TheOmenDen.CorvidDelivery.TiltifyApi.Models.Image? Image { get; set; }
#nullable restore
#else
        public TheOmenDen.CorvidDelivery.TiltifyApi.Models.Image Image { get; set; }
#endif
        /// <summary>Moment when the reward was created</summary>
        public DateTimeOffset? InsertedAt { get; set; }
        /// <summary>Legacy numeric ID of the object. If your app is dependent on this field, please migrate to id. This will be deprecated in the next version of the API.</summary>
        [Obsolete("")]
        public double? LegacyId { get; set; }
        /// <summary>Reward name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>total amount of this reward if it has a limited quantity</summary>
        public int? Quantity { get; set; }
        /// <summary>remaining amount of this reward if it has a limited quantity</summary>
        public int? QuantityRemaining { get; set; }
        /// <summary>Moment when the reward starts</summary>
        public DateTimeOffset? StartsAt { get; set; }
        /// <summary>Moment when the milestone was last updated</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="Reward"/> and sets the default values.
        /// </summary>
        public Reward() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Reward"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Reward CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Reward();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"active", n => { Active = n.GetBoolValue(); } },
                {"amount", n => { Amount = n.GetObjectValue<Money>(Money.CreateFromDiscriminatorValue); } },
                {"description", n => { Description = n.GetStringValue(); } },
                {"ends_at", n => { EndsAt = n.GetDateTimeOffsetValue(); } },
                {"fair_market_value", n => { FairMarketValue = n.GetObjectValue<Money>(Money.CreateFromDiscriminatorValue); } },
                {"highlighted", n => { Highlighted = n.GetBoolValue(); } },
                {"id", n => { Id = n.GetGuidValue(); } },
                {"image", n => { Image = n.GetObjectValue<TheOmenDen.CorvidDelivery.TiltifyApi.Models.Image>(TheOmenDen.CorvidDelivery.TiltifyApi.Models.Image.CreateFromDiscriminatorValue); } },
                {"inserted_at", n => { InsertedAt = n.GetDateTimeOffsetValue(); } },
                {"legacy_id", n => { LegacyId = n.GetDoubleValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"quantity", n => { Quantity = n.GetIntValue(); } },
                {"quantity_remaining", n => { QuantityRemaining = n.GetIntValue(); } },
                {"starts_at", n => { StartsAt = n.GetDateTimeOffsetValue(); } },
                {"updated_at", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("active", Active);
            writer.WriteObjectValue<Money>("amount", Amount);
            writer.WriteStringValue("description", Description);
            writer.WriteDateTimeOffsetValue("ends_at", EndsAt);
            writer.WriteObjectValue<Money>("fair_market_value", FairMarketValue);
            writer.WriteBoolValue("highlighted", Highlighted);
            writer.WriteGuidValue("id", Id);
            writer.WriteObjectValue<TheOmenDen.CorvidDelivery.TiltifyApi.Models.Image>("image", Image);
            writer.WriteDateTimeOffsetValue("inserted_at", InsertedAt);
            writer.WriteDoubleValue("legacy_id", LegacyId);
            writer.WriteStringValue("name", Name);
            writer.WriteIntValue("quantity", Quantity);
            writer.WriteIntValue("quantity_remaining", QuantityRemaining);
            writer.WriteDateTimeOffsetValue("starts_at", StartsAt);
            writer.WriteDateTimeOffsetValue("updated_at", UpdatedAt);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
