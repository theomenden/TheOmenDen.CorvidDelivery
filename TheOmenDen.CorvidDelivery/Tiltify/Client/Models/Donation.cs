// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace TheOmenDen.CorvidDelivery.TiltifyApi.Models {
    public class Donation : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The amount donated.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Money? Amount { get; set; }
#nullable restore
#else
        public Money Amount { get; set; }
#endif
        /// <summary>ID of the campaign donated to</summary>
        public Guid? CampaignId { get; set; }
        /// <summary>ID of the cause donated to</summary>
        public Guid? CauseId { get; set; }
        /// <summary>Timestamp of when the donation was completed.</summary>
        public DateTimeOffset? CompletedAt { get; set; }
        /// <summary>Note left by donor</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DonorComment { get; set; }
#nullable restore
#else
        public string DonorComment { get; set; }
#endif
        /// <summary>Publically visible donor name. This may be set to &apos;Anonymous&apos; if the donation was anonymous or moderated.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DonorName { get; set; }
#nullable restore
#else
        public string DonorName { get; set; }
#endif
        /// <summary>ID of the fundraising event donated to</summary>
        public Guid? FundraisingEventId { get; set; }
        /// <summary>Unique Identifier for the donation.</summary>
        public Guid? Id { get; set; }
        /// <summary>Legacy numeric ID of the object. If your app is dependent on this field, please migrate to id. This will be deprecated in the next version of the API.</summary>
        [Obsolete("")]
        public double? LegacyId { get; set; }
        /// <summary>The ID for a Poll, if one was donated toward.</summary>
        public Guid? PollId { get; set; }
        /// <summary>The ID for a PollOption, if one was donated toward.</summary>
        public Guid? PollOptionId { get; set; }
        /// <summary>The reward_claims property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<RewardClaim>? RewardClaims { get; set; }
#nullable restore
#else
        public List<RewardClaim> RewardClaims { get; set; }
#endif
        /// <summary>The ID for a Reward, if one was donated toward. Deprecated because donations may now have multiple rewards.</summary>
        [Obsolete("")]
        public Guid? RewardId { get; set; }
        /// <summary>Whether or not the donation is a part of a monthly donation.</summary>
        public bool? Sustained { get; set; }
        /// <summary>The ID for a Target, if one was donated toward.</summary>
        public Guid? TargetId { get; set; }
        /// <summary>The ID of a team event if it exists</summary>
        public Guid? TeamEventId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="Donation"/> and sets the default values.
        /// </summary>
        public Donation() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Donation"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Donation CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Donation();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"amount", n => { Amount = n.GetObjectValue<Money>(Money.CreateFromDiscriminatorValue); } },
                {"campaign_id", n => { CampaignId = n.GetGuidValue(); } },
                {"cause_id", n => { CauseId = n.GetGuidValue(); } },
                {"completed_at", n => { CompletedAt = n.GetDateTimeOffsetValue(); } },
                {"donor_comment", n => { DonorComment = n.GetStringValue(); } },
                {"donor_name", n => { DonorName = n.GetStringValue(); } },
                {"fundraising_event_id", n => { FundraisingEventId = n.GetGuidValue(); } },
                {"id", n => { Id = n.GetGuidValue(); } },
                {"legacy_id", n => { LegacyId = n.GetDoubleValue(); } },
                {"poll_id", n => { PollId = n.GetGuidValue(); } },
                {"poll_option_id", n => { PollOptionId = n.GetGuidValue(); } },
                {"reward_claims", n => { RewardClaims = n.GetCollectionOfObjectValues<RewardClaim>(RewardClaim.CreateFromDiscriminatorValue)?.ToList(); } },
                {"reward_id", n => { RewardId = n.GetGuidValue(); } },
                {"sustained", n => { Sustained = n.GetBoolValue(); } },
                {"target_id", n => { TargetId = n.GetGuidValue(); } },
                {"team_event_id", n => { TeamEventId = n.GetGuidValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<Money>("amount", Amount);
            writer.WriteGuidValue("campaign_id", CampaignId);
            writer.WriteGuidValue("cause_id", CauseId);
            writer.WriteDateTimeOffsetValue("completed_at", CompletedAt);
            writer.WriteStringValue("donor_comment", DonorComment);
            writer.WriteStringValue("donor_name", DonorName);
            writer.WriteGuidValue("fundraising_event_id", FundraisingEventId);
            writer.WriteGuidValue("id", Id);
            writer.WriteDoubleValue("legacy_id", LegacyId);
            writer.WriteGuidValue("poll_id", PollId);
            writer.WriteGuidValue("poll_option_id", PollOptionId);
            writer.WriteCollectionOfObjectValues<RewardClaim>("reward_claims", RewardClaims);
            writer.WriteGuidValue("reward_id", RewardId);
            writer.WriteBoolValue("sustained", Sustained);
            writer.WriteGuidValue("target_id", TargetId);
            writer.WriteGuidValue("team_event_id", TeamEventId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
