// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace TheOmenDen.CorvidDelivery.TiltifyApi.Models {
    public class FitnessGoal : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The Fitness Goal total amount</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CurrentValue { get; set; }
#nullable restore
#else
        public string CurrentValue { get; set; }
#endif
        /// <summary>The Fitness Goal distance unit if it exists</summary>
        public FitnessGoal_distance_unit? DistanceUnit { get; set; }
        /// <summary>The Fitness Goal goal amount</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Goal { get; set; }
#nullable restore
#else
        public string Goal { get; set; }
#endif
        /// <summary>Unique Identifier for the fitness goal.</summary>
        public Guid? Id { get; set; }
        /// <summary>The Fitness Goal Type</summary>
        public FitnessGoal_type? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="FitnessGoal"/> and sets the default values.
        /// </summary>
        public FitnessGoal() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="FitnessGoal"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static FitnessGoal CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new FitnessGoal();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"current_value", n => { CurrentValue = n.GetStringValue(); } },
                {"distance_unit", n => { DistanceUnit = n.GetEnumValue<FitnessGoal_distance_unit>(); } },
                {"goal", n => { Goal = n.GetStringValue(); } },
                {"id", n => { Id = n.GetGuidValue(); } },
                {"type", n => { Type = n.GetEnumValue<FitnessGoal_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("current_value", CurrentValue);
            writer.WriteEnumValue<FitnessGoal_distance_unit>("distance_unit", DistanceUnit);
            writer.WriteStringValue("goal", Goal);
            writer.WriteGuidValue("id", Id);
            writer.WriteEnumValue<FitnessGoal_type>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
