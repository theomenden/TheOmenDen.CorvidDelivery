// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
using TheOmenDen.CorvidDelivery.TiltifyApi.Api.Public.Campaigns.Item.Donation_matches;
using TheOmenDen.CorvidDelivery.TiltifyApi.Api.Public.Campaigns.Item.Donations;
using TheOmenDen.CorvidDelivery.TiltifyApi.Api.Public.Campaigns.Item.Donor_leaderboard;
using TheOmenDen.CorvidDelivery.TiltifyApi.Api.Public.Campaigns.Item.Fitness_goals;
using TheOmenDen.CorvidDelivery.TiltifyApi.Api.Public.Campaigns.Item.Milestones;
using TheOmenDen.CorvidDelivery.TiltifyApi.Api.Public.Campaigns.Item.Polls;
using TheOmenDen.CorvidDelivery.TiltifyApi.Api.Public.Campaigns.Item.Rewards;
using TheOmenDen.CorvidDelivery.TiltifyApi.Api.Public.Campaigns.Item.Schedules;
using TheOmenDen.CorvidDelivery.TiltifyApi.Api.Public.Campaigns.Item.Targets;
using TheOmenDen.CorvidDelivery.TiltifyApi.Models;
namespace TheOmenDen.CorvidDelivery.TiltifyApi.Api.Public.Campaigns.Item {
    /// <summary>
    /// Builds and executes requests for operations under \api\public\campaigns\{campaign_id}
    /// </summary>
    public class WithCampaign_ItemRequestBuilder : BaseRequestBuilder {
        /// <summary>The donation_matches property</summary>
        public Donation_matchesRequestBuilder Donation_matches { get =>
            new Donation_matchesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The donations property</summary>
        public DonationsRequestBuilder Donations { get =>
            new DonationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The donor_leaderboard property</summary>
        public Donor_leaderboardRequestBuilder Donor_leaderboard { get =>
            new Donor_leaderboardRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The fitness_goals property</summary>
        public Fitness_goalsRequestBuilder Fitness_goals { get =>
            new Fitness_goalsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The milestones property</summary>
        public MilestonesRequestBuilder Milestones { get =>
            new MilestonesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The polls property</summary>
        public PollsRequestBuilder Polls { get =>
            new PollsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The rewards property</summary>
        public RewardsRequestBuilder Rewards { get =>
            new RewardsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The schedules property</summary>
        public SchedulesRequestBuilder Schedules { get =>
            new SchedulesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The targets property</summary>
        public TargetsRequestBuilder Targets { get =>
            new TargetsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="WithCampaign_ItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithCampaign_ItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/public/campaigns/{campaign_id}", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new <see cref="WithCampaign_ItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithCampaign_ItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/public/campaigns/{campaign_id}", rawUrl) {
        }
        /// <summary>
        /// Returns a campaign by its ID
        /// </summary>
        /// <returns>A <see cref="WithCampaign_GetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="Unauthorized">When receiving a 401 status code</exception>
        /// <exception cref="NotFound">When receiving a 404 status code</exception>
        /// <exception cref="UnprocessableEntity">When receiving a 422 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<WithCampaign_GetResponse?> GetAsWithCampaign_GetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<WithCampaign_GetResponse> GetAsWithCampaign_GetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                {"401", Unauthorized.CreateFromDiscriminatorValue},
                {"404", NotFound.CreateFromDiscriminatorValue},
                {"422", UnprocessableEntity.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<WithCampaign_GetResponse>(requestInfo, WithCampaign_GetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a campaign by its ID
        /// </summary>
        /// <returns>A <see cref="WithCampaign_Response"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="Unauthorized">When receiving a 401 status code</exception>
        /// <exception cref="NotFound">When receiving a 404 status code</exception>
        /// <exception cref="UnprocessableEntity">When receiving a 422 status code</exception>
        [Obsolete("This method is obsolete. Use GetAsWithCampaign_GetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<WithCampaign_Response?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<WithCampaign_Response> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                {"401", Unauthorized.CreateFromDiscriminatorValue},
                {"404", NotFound.CreateFromDiscriminatorValue},
                {"422", UnprocessableEntity.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<WithCampaign_Response>(requestInfo, WithCampaign_Response.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a campaign by its ID
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default) {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="WithCampaign_ItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public WithCampaign_ItemRequestBuilder WithUrl(string rawUrl) {
            return new WithCampaign_ItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class WithCampaign_ItemRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters> {
        }
    }
}
