// <auto-generated/>
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System;
using TheOmenDen.CorvidDelivery.TiltifyApi.Api.Public.LegacyRelays.Item;
namespace TheOmenDen.CorvidDelivery.TiltifyApi.Api.Public.LegacyRelays {
    /// <summary>
    /// Builds and executes requests for operations under \api\public\legacy-relays
    /// </summary>
    public class LegacyRelaysRequestBuilder : BaseRequestBuilder {
        /// <summary>Gets an item from the TheOmenDen.CorvidDelivery.TiltifyApi.api.public.legacyRelays.item collection</summary>
        /// <param name="position">The provider ID</param>
        /// <returns>A <see cref="WithProviderItemRequestBuilder"/></returns>
        public WithProviderItemRequestBuilder this[string position] { get {
            var urlTplParams = new Dictionary<string, object>(PathParameters);
            urlTplParams.Add("provider", position);
            return new WithProviderItemRequestBuilder(urlTplParams, RequestAdapter);
        } }
        /// <summary>
        /// Instantiates a new <see cref="LegacyRelaysRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public LegacyRelaysRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/public/legacy-relays", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new <see cref="LegacyRelaysRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public LegacyRelaysRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/public/legacy-relays", rawUrl) {
        }
    }
}
