// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace TheOmenDen.CorvidDelivery.Twitch.Tags.Streams {
    public class StreamsGetResponse_data : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The is_auto property</summary>
        public bool? IsAuto { get; set; }
        /// <summary>The localization_descriptions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public StreamsGetResponse_data_localization_descriptions? LocalizationDescriptions { get; set; }
#nullable restore
#else
        public StreamsGetResponse_data_localization_descriptions LocalizationDescriptions { get; set; }
#endif
        /// <summary>The localization_names property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public StreamsGetResponse_data_localization_names? LocalizationNames { get; set; }
#nullable restore
#else
        public StreamsGetResponse_data_localization_names LocalizationNames { get; set; }
#endif
        /// <summary>The tag_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TagId { get; set; }
#nullable restore
#else
        public string TagId { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="StreamsGetResponse_data"/> and sets the default values.
        /// </summary>
        public StreamsGetResponse_data() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="StreamsGetResponse_data"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static StreamsGetResponse_data CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new StreamsGetResponse_data();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"is_auto", n => { IsAuto = n.GetBoolValue(); } },
                {"localization_descriptions", n => { LocalizationDescriptions = n.GetObjectValue<StreamsGetResponse_data_localization_descriptions>(StreamsGetResponse_data_localization_descriptions.CreateFromDiscriminatorValue); } },
                {"localization_names", n => { LocalizationNames = n.GetObjectValue<StreamsGetResponse_data_localization_names>(StreamsGetResponse_data_localization_names.CreateFromDiscriminatorValue); } },
                {"tag_id", n => { TagId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("is_auto", IsAuto);
            writer.WriteObjectValue<StreamsGetResponse_data_localization_descriptions>("localization_descriptions", LocalizationDescriptions);
            writer.WriteObjectValue<StreamsGetResponse_data_localization_names>("localization_names", LocalizationNames);
            writer.WriteStringValue("tag_id", TagId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
