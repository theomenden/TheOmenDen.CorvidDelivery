// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace TheOmenDen.CorvidDelivery.Twitch.Channel_points.Custom_rewards.Redemptions {
    public class RedemptionsPatchResponse_data : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The broadcaster_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BroadcasterId { get; set; }
#nullable restore
#else
        public string BroadcasterId { get; set; }
#endif
        /// <summary>The broadcaster_login property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BroadcasterLogin { get; set; }
#nullable restore
#else
        public string BroadcasterLogin { get; set; }
#endif
        /// <summary>The broadcaster_name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BroadcasterName { get; set; }
#nullable restore
#else
        public string BroadcasterName { get; set; }
#endif
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The redeemed_at property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RedeemedAt { get; set; }
#nullable restore
#else
        public string RedeemedAt { get; set; }
#endif
        /// <summary>The reward property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RedemptionsPatchResponse_data_reward? Reward { get; set; }
#nullable restore
#else
        public RedemptionsPatchResponse_data_reward Reward { get; set; }
#endif
        /// <summary>The status property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>The user_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserId { get; set; }
#nullable restore
#else
        public string UserId { get; set; }
#endif
        /// <summary>The user_input property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserInput { get; set; }
#nullable restore
#else
        public string UserInput { get; set; }
#endif
        /// <summary>The user_login property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserLogin { get; set; }
#nullable restore
#else
        public string UserLogin { get; set; }
#endif
        /// <summary>The user_name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserName { get; set; }
#nullable restore
#else
        public string UserName { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="RedemptionsPatchResponse_data"/> and sets the default values.
        /// </summary>
        public RedemptionsPatchResponse_data() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="RedemptionsPatchResponse_data"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static RedemptionsPatchResponse_data CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new RedemptionsPatchResponse_data();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"broadcaster_id", n => { BroadcasterId = n.GetStringValue(); } },
                {"broadcaster_login", n => { BroadcasterLogin = n.GetStringValue(); } },
                {"broadcaster_name", n => { BroadcasterName = n.GetStringValue(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"redeemed_at", n => { RedeemedAt = n.GetStringValue(); } },
                {"reward", n => { Reward = n.GetObjectValue<RedemptionsPatchResponse_data_reward>(RedemptionsPatchResponse_data_reward.CreateFromDiscriminatorValue); } },
                {"status", n => { Status = n.GetStringValue(); } },
                {"user_id", n => { UserId = n.GetStringValue(); } },
                {"user_input", n => { UserInput = n.GetStringValue(); } },
                {"user_login", n => { UserLogin = n.GetStringValue(); } },
                {"user_name", n => { UserName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("broadcaster_id", BroadcasterId);
            writer.WriteStringValue("broadcaster_login", BroadcasterLogin);
            writer.WriteStringValue("broadcaster_name", BroadcasterName);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("redeemed_at", RedeemedAt);
            writer.WriteObjectValue<RedemptionsPatchResponse_data_reward>("reward", Reward);
            writer.WriteStringValue("status", Status);
            writer.WriteStringValue("user_id", UserId);
            writer.WriteStringValue("user_input", UserInput);
            writer.WriteStringValue("user_login", UserLogin);
            writer.WriteStringValue("user_name", UserName);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
