// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace TheOmenDen.CorvidDelivery.Twitch.Channel_points.Custom_rewards {
    public class Custom_rewardsGetResponse_data : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The background_color property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BackgroundColor { get; set; }
#nullable restore
#else
        public string BackgroundColor { get; set; }
#endif
        /// <summary>The broadcaster_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BroadcasterId { get; set; }
#nullable restore
#else
        public string BroadcasterId { get; set; }
#endif
        /// <summary>The broadcaster_login property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BroadcasterLogin { get; set; }
#nullable restore
#else
        public string BroadcasterLogin { get; set; }
#endif
        /// <summary>The broadcaster_name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BroadcasterName { get; set; }
#nullable restore
#else
        public string BroadcasterName { get; set; }
#endif
        /// <summary>The cooldown_expires_at property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CooldownExpiresAt { get; set; }
#nullable restore
#else
        public string CooldownExpiresAt { get; set; }
#endif
        /// <summary>The cost property</summary>
        public double? Cost { get; set; }
        /// <summary>The default_image property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Custom_rewardsGetResponse_data_default_image? DefaultImage { get; set; }
#nullable restore
#else
        public Custom_rewardsGetResponse_data_default_image DefaultImage { get; set; }
#endif
        /// <summary>The global_cooldown_setting property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Custom_rewardsGetResponse_data_global_cooldown_setting? GlobalCooldownSetting { get; set; }
#nullable restore
#else
        public Custom_rewardsGetResponse_data_global_cooldown_setting GlobalCooldownSetting { get; set; }
#endif
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The image property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Image { get; set; }
#nullable restore
#else
        public string Image { get; set; }
#endif
        /// <summary>The is_enabled property</summary>
        public bool? IsEnabled { get; set; }
        /// <summary>The is_in_stock property</summary>
        public bool? IsInStock { get; set; }
        /// <summary>The is_paused property</summary>
        public bool? IsPaused { get; set; }
        /// <summary>The is_user_input_required property</summary>
        public bool? IsUserInputRequired { get; set; }
        /// <summary>The max_per_stream_setting property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Custom_rewardsGetResponse_data_max_per_stream_setting? MaxPerStreamSetting { get; set; }
#nullable restore
#else
        public Custom_rewardsGetResponse_data_max_per_stream_setting MaxPerStreamSetting { get; set; }
#endif
        /// <summary>The max_per_user_per_stream_setting property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Custom_rewardsGetResponse_data_max_per_user_per_stream_setting? MaxPerUserPerStreamSetting { get; set; }
#nullable restore
#else
        public Custom_rewardsGetResponse_data_max_per_user_per_stream_setting MaxPerUserPerStreamSetting { get; set; }
#endif
        /// <summary>The prompt property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Prompt { get; set; }
#nullable restore
#else
        public string Prompt { get; set; }
#endif
        /// <summary>The redemptions_redeemed_current_stream property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RedemptionsRedeemedCurrentStream { get; set; }
#nullable restore
#else
        public string RedemptionsRedeemedCurrentStream { get; set; }
#endif
        /// <summary>The should_redemptions_skip_request_queue property</summary>
        public bool? ShouldRedemptionsSkipRequestQueue { get; set; }
        /// <summary>The title property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Custom_rewardsGetResponse_data"/> and sets the default values.
        /// </summary>
        public Custom_rewardsGetResponse_data() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Custom_rewardsGetResponse_data"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Custom_rewardsGetResponse_data CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Custom_rewardsGetResponse_data();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"background_color", n => { BackgroundColor = n.GetStringValue(); } },
                {"broadcaster_id", n => { BroadcasterId = n.GetStringValue(); } },
                {"broadcaster_login", n => { BroadcasterLogin = n.GetStringValue(); } },
                {"broadcaster_name", n => { BroadcasterName = n.GetStringValue(); } },
                {"cooldown_expires_at", n => { CooldownExpiresAt = n.GetStringValue(); } },
                {"cost", n => { Cost = n.GetDoubleValue(); } },
                {"default_image", n => { DefaultImage = n.GetObjectValue<Custom_rewardsGetResponse_data_default_image>(Custom_rewardsGetResponse_data_default_image.CreateFromDiscriminatorValue); } },
                {"global_cooldown_setting", n => { GlobalCooldownSetting = n.GetObjectValue<Custom_rewardsGetResponse_data_global_cooldown_setting>(Custom_rewardsGetResponse_data_global_cooldown_setting.CreateFromDiscriminatorValue); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"image", n => { Image = n.GetStringValue(); } },
                {"is_enabled", n => { IsEnabled = n.GetBoolValue(); } },
                {"is_in_stock", n => { IsInStock = n.GetBoolValue(); } },
                {"is_paused", n => { IsPaused = n.GetBoolValue(); } },
                {"is_user_input_required", n => { IsUserInputRequired = n.GetBoolValue(); } },
                {"max_per_stream_setting", n => { MaxPerStreamSetting = n.GetObjectValue<Custom_rewardsGetResponse_data_max_per_stream_setting>(Custom_rewardsGetResponse_data_max_per_stream_setting.CreateFromDiscriminatorValue); } },
                {"max_per_user_per_stream_setting", n => { MaxPerUserPerStreamSetting = n.GetObjectValue<Custom_rewardsGetResponse_data_max_per_user_per_stream_setting>(Custom_rewardsGetResponse_data_max_per_user_per_stream_setting.CreateFromDiscriminatorValue); } },
                {"prompt", n => { Prompt = n.GetStringValue(); } },
                {"redemptions_redeemed_current_stream", n => { RedemptionsRedeemedCurrentStream = n.GetStringValue(); } },
                {"should_redemptions_skip_request_queue", n => { ShouldRedemptionsSkipRequestQueue = n.GetBoolValue(); } },
                {"title", n => { Title = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("background_color", BackgroundColor);
            writer.WriteStringValue("broadcaster_id", BroadcasterId);
            writer.WriteStringValue("broadcaster_login", BroadcasterLogin);
            writer.WriteStringValue("broadcaster_name", BroadcasterName);
            writer.WriteStringValue("cooldown_expires_at", CooldownExpiresAt);
            writer.WriteDoubleValue("cost", Cost);
            writer.WriteObjectValue<Custom_rewardsGetResponse_data_default_image>("default_image", DefaultImage);
            writer.WriteObjectValue<Custom_rewardsGetResponse_data_global_cooldown_setting>("global_cooldown_setting", GlobalCooldownSetting);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("image", Image);
            writer.WriteBoolValue("is_enabled", IsEnabled);
            writer.WriteBoolValue("is_in_stock", IsInStock);
            writer.WriteBoolValue("is_paused", IsPaused);
            writer.WriteBoolValue("is_user_input_required", IsUserInputRequired);
            writer.WriteObjectValue<Custom_rewardsGetResponse_data_max_per_stream_setting>("max_per_stream_setting", MaxPerStreamSetting);
            writer.WriteObjectValue<Custom_rewardsGetResponse_data_max_per_user_per_stream_setting>("max_per_user_per_stream_setting", MaxPerUserPerStreamSetting);
            writer.WriteStringValue("prompt", Prompt);
            writer.WriteStringValue("redemptions_redeemed_current_stream", RedemptionsRedeemedCurrentStream);
            writer.WriteBoolValue("should_redemptions_skip_request_queue", ShouldRedemptionsSkipRequestQueue);
            writer.WriteStringValue("title", Title);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
