// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Serialization.Form;
using Microsoft.Kiota.Serialization.Json;
using Microsoft.Kiota.Serialization.Multipart;
using Microsoft.Kiota.Serialization.Text;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System;
using TheOmenDen.CorvidDelivery.Twitch.Analytics;
using TheOmenDen.CorvidDelivery.Twitch.Bits;
using TheOmenDen.CorvidDelivery.Twitch.Channel_points;
using TheOmenDen.CorvidDelivery.Twitch.Channels;
using TheOmenDen.CorvidDelivery.Twitch.Charity;
using TheOmenDen.CorvidDelivery.Twitch.Chat;
using TheOmenDen.CorvidDelivery.Twitch.Clips;
using TheOmenDen.CorvidDelivery.Twitch.Content_classification_labels;
using TheOmenDen.CorvidDelivery.Twitch.Entitlements;
using TheOmenDen.CorvidDelivery.Twitch.Eventsub;
using TheOmenDen.CorvidDelivery.Twitch.Extensions;
using TheOmenDen.CorvidDelivery.Twitch.Games;
using TheOmenDen.CorvidDelivery.Twitch.Goals;
using TheOmenDen.CorvidDelivery.Twitch.Guest_star;
using TheOmenDen.CorvidDelivery.Twitch.Hypetrain;
using TheOmenDen.CorvidDelivery.Twitch.Moderation;
using TheOmenDen.CorvidDelivery.Twitch.Polls;
using TheOmenDen.CorvidDelivery.Twitch.Predictions;
using TheOmenDen.CorvidDelivery.Twitch.Raids;
using TheOmenDen.CorvidDelivery.Twitch.Schedule;
using TheOmenDen.CorvidDelivery.Twitch.Search;
using TheOmenDen.CorvidDelivery.Twitch.Streams;
using TheOmenDen.CorvidDelivery.Twitch.Subscriptions;
using TheOmenDen.CorvidDelivery.Twitch.Tags;
using TheOmenDen.CorvidDelivery.Twitch.Teams;
using TheOmenDen.CorvidDelivery.Twitch.Users;
using TheOmenDen.CorvidDelivery.Twitch.Videos;
using TheOmenDen.CorvidDelivery.Twitch.Whispers;
namespace TheOmenDen.CorvidDelivery.Twitch {
    /// <summary>
    /// The main entry point of the SDK, exposes the configuration and the fluent API.
    /// </summary>
    public class TwitchClient : BaseRequestBuilder {
        /// <summary>The analytics property</summary>
        public AnalyticsRequestBuilder Analytics { get =>
            new AnalyticsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The bits property</summary>
        public BitsRequestBuilder Bits { get =>
            new BitsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The channel_points property</summary>
        public Channel_pointsRequestBuilder Channel_points { get =>
            new Channel_pointsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The channels property</summary>
        public ChannelsRequestBuilder Channels { get =>
            new ChannelsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The charity property</summary>
        public CharityRequestBuilder Charity { get =>
            new CharityRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The chat property</summary>
        public ChatRequestBuilder Chat { get =>
            new ChatRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The clips property</summary>
        public ClipsRequestBuilder Clips { get =>
            new ClipsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The content_classification_labels property</summary>
        public Content_classification_labelsRequestBuilder Content_classification_labels { get =>
            new Content_classification_labelsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The entitlements property</summary>
        public EntitlementsRequestBuilder Entitlements { get =>
            new EntitlementsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The eventsub property</summary>
        public EventsubRequestBuilder Eventsub { get =>
            new EventsubRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The extensions property</summary>
        public ExtensionsRequestBuilder Extensions { get =>
            new ExtensionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The games property</summary>
        public GamesRequestBuilder Games { get =>
            new GamesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The goals property</summary>
        public GoalsRequestBuilder Goals { get =>
            new GoalsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The guest_star property</summary>
        public Guest_starRequestBuilder Guest_star { get =>
            new Guest_starRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The hypetrain property</summary>
        public HypetrainRequestBuilder Hypetrain { get =>
            new HypetrainRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The moderation property</summary>
        public ModerationRequestBuilder Moderation { get =>
            new ModerationRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The polls property</summary>
        public PollsRequestBuilder Polls { get =>
            new PollsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The predictions property</summary>
        public PredictionsRequestBuilder Predictions { get =>
            new PredictionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The raids property</summary>
        public RaidsRequestBuilder Raids { get =>
            new RaidsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The schedule property</summary>
        public ScheduleRequestBuilder Schedule { get =>
            new ScheduleRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The search property</summary>
        public SearchRequestBuilder Search { get =>
            new SearchRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The streams property</summary>
        public StreamsRequestBuilder Streams { get =>
            new StreamsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The subscriptions property</summary>
        public SubscriptionsRequestBuilder Subscriptions { get =>
            new SubscriptionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The tags property</summary>
        public TagsRequestBuilder Tags { get =>
            new TagsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The teams property</summary>
        public TeamsRequestBuilder Teams { get =>
            new TeamsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The users property</summary>
        public UsersRequestBuilder Users { get =>
            new UsersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The videos property</summary>
        public VideosRequestBuilder Videos { get =>
            new VideosRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The whispers property</summary>
        public WhispersRequestBuilder Whispers { get =>
            new WhispersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="TwitchClient"/> and sets the default values.
        /// </summary>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TwitchClient(IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}", new Dictionary<string, object>()) {
            ApiClientBuilder.RegisterDefaultSerializer<JsonSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<TextSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<FormSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<MultipartSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<JsonParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<TextParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<FormParseNodeFactory>();
            if (string.IsNullOrEmpty(RequestAdapter.BaseUrl)) {
                RequestAdapter.BaseUrl = "https://api.twitch.tv/helix";
            }
            PathParameters.TryAdd("baseurl", RequestAdapter.BaseUrl);
        }
    }
}
