// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace TheOmenDen.CorvidDelivery.Twitch.Extensions.Transactions {
    public class TransactionsGetResponse_data_product_data : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The broadcast property</summary>
        public bool? Broadcast { get; set; }
        /// <summary>The cost property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public TransactionsGetResponse_data_product_data_cost? Cost { get; set; }
#nullable restore
#else
        public TransactionsGetResponse_data_product_data_cost Cost { get; set; }
#endif
        /// <summary>The displayName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>The domain property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Domain { get; set; }
#nullable restore
#else
        public string Domain { get; set; }
#endif
        /// <summary>The expiration property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Expiration { get; set; }
#nullable restore
#else
        public string Expiration { get; set; }
#endif
        /// <summary>The inDevelopment property</summary>
        public bool? InDevelopment { get; set; }
        /// <summary>The sku property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Sku { get; set; }
#nullable restore
#else
        public string Sku { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="TransactionsGetResponse_data_product_data"/> and sets the default values.
        /// </summary>
        public TransactionsGetResponse_data_product_data() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="TransactionsGetResponse_data_product_data"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static TransactionsGetResponse_data_product_data CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new TransactionsGetResponse_data_product_data();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"broadcast", n => { Broadcast = n.GetBoolValue(); } },
                {"cost", n => { Cost = n.GetObjectValue<TransactionsGetResponse_data_product_data_cost>(TransactionsGetResponse_data_product_data_cost.CreateFromDiscriminatorValue); } },
                {"displayName", n => { DisplayName = n.GetStringValue(); } },
                {"domain", n => { Domain = n.GetStringValue(); } },
                {"expiration", n => { Expiration = n.GetStringValue(); } },
                {"inDevelopment", n => { InDevelopment = n.GetBoolValue(); } },
                {"sku", n => { Sku = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("broadcast", Broadcast);
            writer.WriteObjectValue<TransactionsGetResponse_data_product_data_cost>("cost", Cost);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteStringValue("domain", Domain);
            writer.WriteStringValue("expiration", Expiration);
            writer.WriteBoolValue("inDevelopment", InDevelopment);
            writer.WriteStringValue("sku", Sku);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
