// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
using TheOmenDen.CorvidDelivery.Twitch.Extensions.Chat;
using TheOmenDen.CorvidDelivery.Twitch.Extensions.Configurations;
using TheOmenDen.CorvidDelivery.Twitch.Extensions.Jwt;
using TheOmenDen.CorvidDelivery.Twitch.Extensions.Live;
using TheOmenDen.CorvidDelivery.Twitch.Extensions.Pubsub;
using TheOmenDen.CorvidDelivery.Twitch.Extensions.Released;
using TheOmenDen.CorvidDelivery.Twitch.Extensions.Required_configuration;
using TheOmenDen.CorvidDelivery.Twitch.Extensions.Transactions;
namespace TheOmenDen.CorvidDelivery.Twitch.Extensions {
    /// <summary>
    /// Builds and executes requests for operations under \extensions
    /// </summary>
    public class ExtensionsRequestBuilder : BaseRequestBuilder {
        /// <summary>The chat property</summary>
        public ChatRequestBuilder Chat { get =>
            new ChatRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The configurations property</summary>
        public ConfigurationsRequestBuilder Configurations { get =>
            new ConfigurationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The jwt property</summary>
        public JwtRequestBuilder Jwt { get =>
            new JwtRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The live property</summary>
        public LiveRequestBuilder Live { get =>
            new LiveRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The pubsub property</summary>
        public PubsubRequestBuilder Pubsub { get =>
            new PubsubRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The released property</summary>
        public ReleasedRequestBuilder Released { get =>
            new ReleasedRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The required_configuration property</summary>
        public Required_configurationRequestBuilder Required_configuration { get =>
            new Required_configurationRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The transactions property</summary>
        public TransactionsRequestBuilder Transactions { get =>
            new TransactionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="ExtensionsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ExtensionsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/extensions{?extension_id*,extension_version*}", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new <see cref="ExtensionsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ExtensionsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/extensions{?extension_id*,extension_version*}", rawUrl) {
        }
        /// <summary>
        /// Gets information about an extension.
        /// </summary>
        /// <returns>A <see cref="ExtensionsGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<ExtensionsGetResponse?> GetAsExtensionsGetResponseAsync(Action<RequestConfiguration<ExtensionsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<ExtensionsGetResponse> GetAsExtensionsGetResponseAsync(Action<RequestConfiguration<ExtensionsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<ExtensionsGetResponse>(requestInfo, ExtensionsGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Gets information about an extension.
        /// </summary>
        /// <returns>A <see cref="ExtensionsResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsExtensionsGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<ExtensionsResponse?> GetAsync(Action<RequestConfiguration<ExtensionsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<ExtensionsResponse> GetAsync(Action<RequestConfiguration<ExtensionsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<ExtensionsResponse>(requestInfo, ExtensionsResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Gets information about an extension.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<ExtensionsRequestBuilderGetQueryParameters>>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<ExtensionsRequestBuilderGetQueryParameters>> requestConfiguration = default) {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="ExtensionsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public ExtensionsRequestBuilder WithUrl(string rawUrl) {
            return new ExtensionsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Gets information about an extension.
        /// </summary>
        public class ExtensionsRequestBuilderGetQueryParameters {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("extension_id")]
            public string? ExtensionId { get; set; }
#nullable restore
#else
            [QueryParameter("extension_id")]
            public string ExtensionId { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("extension_version")]
            public string? ExtensionVersion { get; set; }
#nullable restore
#else
            [QueryParameter("extension_version")]
            public string ExtensionVersion { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class ExtensionsRequestBuilderGetRequestConfiguration : RequestConfiguration<ExtensionsRequestBuilderGetQueryParameters> {
        }
    }
}
