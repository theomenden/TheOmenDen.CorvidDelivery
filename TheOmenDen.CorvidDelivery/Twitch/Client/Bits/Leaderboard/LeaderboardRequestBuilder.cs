// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace TheOmenDen.CorvidDelivery.Twitch.Bits.Leaderboard {
    /// <summary>
    /// Builds and executes requests for operations under \bits\leaderboard
    /// </summary>
    public class LeaderboardRequestBuilder : BaseRequestBuilder {
        /// <summary>
        /// Instantiates a new <see cref="LeaderboardRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public LeaderboardRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/bits/leaderboard{?count*,period*,started_at*,user_id*}", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new <see cref="LeaderboardRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public LeaderboardRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/bits/leaderboard{?count*,period*,started_at*,user_id*}", rawUrl) {
        }
        /// <summary>
        /// Gets the Bits leaderboard for the authenticated broadcaster.
        /// </summary>
        /// <returns>A <see cref="LeaderboardGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<LeaderboardGetResponse?> GetAsLeaderboardGetResponseAsync(Action<RequestConfiguration<LeaderboardRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<LeaderboardGetResponse> GetAsLeaderboardGetResponseAsync(Action<RequestConfiguration<LeaderboardRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<LeaderboardGetResponse>(requestInfo, LeaderboardGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Gets the Bits leaderboard for the authenticated broadcaster.
        /// </summary>
        /// <returns>A <see cref="LeaderboardResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsLeaderboardGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<LeaderboardResponse?> GetAsync(Action<RequestConfiguration<LeaderboardRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<LeaderboardResponse> GetAsync(Action<RequestConfiguration<LeaderboardRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<LeaderboardResponse>(requestInfo, LeaderboardResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Gets the Bits leaderboard for the authenticated broadcaster.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<LeaderboardRequestBuilderGetQueryParameters>>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<LeaderboardRequestBuilderGetQueryParameters>> requestConfiguration = default) {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="LeaderboardRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public LeaderboardRequestBuilder WithUrl(string rawUrl) {
            return new LeaderboardRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Gets the Bits leaderboard for the authenticated broadcaster.
        /// </summary>
        public class LeaderboardRequestBuilderGetQueryParameters {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("count")]
            public string? Count { get; set; }
#nullable restore
#else
            [QueryParameter("count")]
            public string Count { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("period")]
            public string? Period { get; set; }
#nullable restore
#else
            [QueryParameter("period")]
            public string Period { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("started_at")]
            public string? StartedAt { get; set; }
#nullable restore
#else
            [QueryParameter("started_at")]
            public string StartedAt { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("user_id")]
            public string? UserId { get; set; }
#nullable restore
#else
            [QueryParameter("user_id")]
            public string UserId { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class LeaderboardRequestBuilderGetRequestConfiguration : RequestConfiguration<LeaderboardRequestBuilderGetQueryParameters> {
        }
    }
}
