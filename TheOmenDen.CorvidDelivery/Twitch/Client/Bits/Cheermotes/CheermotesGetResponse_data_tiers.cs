// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace TheOmenDen.CorvidDelivery.Twitch.Bits.Cheermotes {
    public class CheermotesGetResponse_data_tiers : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The can_cheer property</summary>
        public bool? CanCheer { get; set; }
        /// <summary>The color property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Color { get; set; }
#nullable restore
#else
        public string Color { get; set; }
#endif
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The images property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public CheermotesGetResponse_data_tiers_images? Images { get; set; }
#nullable restore
#else
        public CheermotesGetResponse_data_tiers_images Images { get; set; }
#endif
        /// <summary>The min_bits property</summary>
        public double? MinBits { get; set; }
        /// <summary>The show_in_bits_card property</summary>
        public bool? ShowInBitsCard { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="CheermotesGetResponse_data_tiers"/> and sets the default values.
        /// </summary>
        public CheermotesGetResponse_data_tiers() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="CheermotesGetResponse_data_tiers"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static CheermotesGetResponse_data_tiers CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CheermotesGetResponse_data_tiers();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"can_cheer", n => { CanCheer = n.GetBoolValue(); } },
                {"color", n => { Color = n.GetStringValue(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"images", n => { Images = n.GetObjectValue<CheermotesGetResponse_data_tiers_images>(CheermotesGetResponse_data_tiers_images.CreateFromDiscriminatorValue); } },
                {"min_bits", n => { MinBits = n.GetDoubleValue(); } },
                {"show_in_bits_card", n => { ShowInBitsCard = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("can_cheer", CanCheer);
            writer.WriteStringValue("color", Color);
            writer.WriteStringValue("id", Id);
            writer.WriteObjectValue<CheermotesGetResponse_data_tiers_images>("images", Images);
            writer.WriteDoubleValue("min_bits", MinBits);
            writer.WriteBoolValue("show_in_bits_card", ShowInBitsCard);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
