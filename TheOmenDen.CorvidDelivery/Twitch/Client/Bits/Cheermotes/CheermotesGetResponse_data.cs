// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace TheOmenDen.CorvidDelivery.Twitch.Bits.Cheermotes {
    public class CheermotesGetResponse_data : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The is_charitable property</summary>
        public bool? IsCharitable { get; set; }
        /// <summary>The last_updated property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastUpdated { get; set; }
#nullable restore
#else
        public string LastUpdated { get; set; }
#endif
        /// <summary>The order property</summary>
        public double? Order { get; set; }
        /// <summary>The prefix property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Prefix { get; set; }
#nullable restore
#else
        public string Prefix { get; set; }
#endif
        /// <summary>The tiers property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<CheermotesGetResponse_data_tiers>? Tiers { get; set; }
#nullable restore
#else
        public List<CheermotesGetResponse_data_tiers> Tiers { get; set; }
#endif
        /// <summary>The type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="CheermotesGetResponse_data"/> and sets the default values.
        /// </summary>
        public CheermotesGetResponse_data() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="CheermotesGetResponse_data"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static CheermotesGetResponse_data CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CheermotesGetResponse_data();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"is_charitable", n => { IsCharitable = n.GetBoolValue(); } },
                {"last_updated", n => { LastUpdated = n.GetStringValue(); } },
                {"order", n => { Order = n.GetDoubleValue(); } },
                {"prefix", n => { Prefix = n.GetStringValue(); } },
                {"tiers", n => { Tiers = n.GetCollectionOfObjectValues<CheermotesGetResponse_data_tiers>(CheermotesGetResponse_data_tiers.CreateFromDiscriminatorValue)?.ToList(); } },
                {"type", n => { Type = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("is_charitable", IsCharitable);
            writer.WriteStringValue("last_updated", LastUpdated);
            writer.WriteDoubleValue("order", Order);
            writer.WriteStringValue("prefix", Prefix);
            writer.WriteCollectionOfObjectValues<CheermotesGetResponse_data_tiers>("tiers", Tiers);
            writer.WriteStringValue("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
