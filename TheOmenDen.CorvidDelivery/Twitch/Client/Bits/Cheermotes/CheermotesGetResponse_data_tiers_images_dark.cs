// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace TheOmenDen.CorvidDelivery.Twitch.Bits.Cheermotes {
    public class CheermotesGetResponse_data_tiers_images_dark : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The animated property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public CheermotesGetResponse_data_tiers_images_dark_animated? Animated { get; set; }
#nullable restore
#else
        public CheermotesGetResponse_data_tiers_images_dark_animated Animated { get; set; }
#endif
        /// <summary>The static property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public CheermotesGetResponse_data_tiers_images_dark_static? Static { get; set; }
#nullable restore
#else
        public CheermotesGetResponse_data_tiers_images_dark_static Static { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="CheermotesGetResponse_data_tiers_images_dark"/> and sets the default values.
        /// </summary>
        public CheermotesGetResponse_data_tiers_images_dark() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="CheermotesGetResponse_data_tiers_images_dark"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static CheermotesGetResponse_data_tiers_images_dark CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CheermotesGetResponse_data_tiers_images_dark();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"animated", n => { Animated = n.GetObjectValue<CheermotesGetResponse_data_tiers_images_dark_animated>(CheermotesGetResponse_data_tiers_images_dark_animated.CreateFromDiscriminatorValue); } },
                {"static", n => { Static = n.GetObjectValue<CheermotesGetResponse_data_tiers_images_dark_static>(CheermotesGetResponse_data_tiers_images_dark_static.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<CheermotesGetResponse_data_tiers_images_dark_animated>("animated", Animated);
            writer.WriteObjectValue<CheermotesGetResponse_data_tiers_images_dark_static>("static", Static);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
