// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace TheOmenDen.CorvidDelivery.Twitch.Hypetrain.Events {
    public class EventsGetResponse_data_event_data : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The broadcaster_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BroadcasterId { get; set; }
#nullable restore
#else
        public string BroadcasterId { get; set; }
#endif
        /// <summary>The cooldown_end_time property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CooldownEndTime { get; set; }
#nullable restore
#else
        public string CooldownEndTime { get; set; }
#endif
        /// <summary>The expires_at property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExpiresAt { get; set; }
#nullable restore
#else
        public string ExpiresAt { get; set; }
#endif
        /// <summary>The goal property</summary>
        public double? Goal { get; set; }
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The last_contribution property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public EventsGetResponse_data_event_data_last_contribution? LastContribution { get; set; }
#nullable restore
#else
        public EventsGetResponse_data_event_data_last_contribution LastContribution { get; set; }
#endif
        /// <summary>The level property</summary>
        public double? Level { get; set; }
        /// <summary>The started_at property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StartedAt { get; set; }
#nullable restore
#else
        public string StartedAt { get; set; }
#endif
        /// <summary>The top_contributions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<EventsGetResponse_data_event_data_top_contributions>? TopContributions { get; set; }
#nullable restore
#else
        public List<EventsGetResponse_data_event_data_top_contributions> TopContributions { get; set; }
#endif
        /// <summary>The total property</summary>
        public double? Total { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="EventsGetResponse_data_event_data"/> and sets the default values.
        /// </summary>
        public EventsGetResponse_data_event_data() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="EventsGetResponse_data_event_data"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static EventsGetResponse_data_event_data CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new EventsGetResponse_data_event_data();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"broadcaster_id", n => { BroadcasterId = n.GetStringValue(); } },
                {"cooldown_end_time", n => { CooldownEndTime = n.GetStringValue(); } },
                {"expires_at", n => { ExpiresAt = n.GetStringValue(); } },
                {"goal", n => { Goal = n.GetDoubleValue(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"last_contribution", n => { LastContribution = n.GetObjectValue<EventsGetResponse_data_event_data_last_contribution>(EventsGetResponse_data_event_data_last_contribution.CreateFromDiscriminatorValue); } },
                {"level", n => { Level = n.GetDoubleValue(); } },
                {"started_at", n => { StartedAt = n.GetStringValue(); } },
                {"top_contributions", n => { TopContributions = n.GetCollectionOfObjectValues<EventsGetResponse_data_event_data_top_contributions>(EventsGetResponse_data_event_data_top_contributions.CreateFromDiscriminatorValue)?.ToList(); } },
                {"total", n => { Total = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("broadcaster_id", BroadcasterId);
            writer.WriteStringValue("cooldown_end_time", CooldownEndTime);
            writer.WriteStringValue("expires_at", ExpiresAt);
            writer.WriteDoubleValue("goal", Goal);
            writer.WriteStringValue("id", Id);
            writer.WriteObjectValue<EventsGetResponse_data_event_data_last_contribution>("last_contribution", LastContribution);
            writer.WriteDoubleValue("level", Level);
            writer.WriteStringValue("started_at", StartedAt);
            writer.WriteCollectionOfObjectValues<EventsGetResponse_data_event_data_top_contributions>("top_contributions", TopContributions);
            writer.WriteDoubleValue("total", Total);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
