// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace TheOmenDen.CorvidDelivery.Twitch.Moderation.Automod.Settings {
    public class SettingsGetResponse_data : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The aggression property</summary>
        public double? Aggression { get; set; }
        /// <summary>The broadcaster_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BroadcasterId { get; set; }
#nullable restore
#else
        public string BroadcasterId { get; set; }
#endif
        /// <summary>The bullying property</summary>
        public double? Bullying { get; set; }
        /// <summary>The disability property</summary>
        public double? Disability { get; set; }
        /// <summary>The misogyny property</summary>
        public double? Misogyny { get; set; }
        /// <summary>The moderator_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ModeratorId { get; set; }
#nullable restore
#else
        public string ModeratorId { get; set; }
#endif
        /// <summary>The overall_level property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OverallLevel { get; set; }
#nullable restore
#else
        public string OverallLevel { get; set; }
#endif
        /// <summary>The race_ethnicity_or_religion property</summary>
        public double? RaceEthnicityOrReligion { get; set; }
        /// <summary>The sex_based_terms property</summary>
        public double? SexBasedTerms { get; set; }
        /// <summary>The sexuality_sex_or_gender property</summary>
        public double? SexualitySexOrGender { get; set; }
        /// <summary>The swearing property</summary>
        public double? Swearing { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="SettingsGetResponse_data"/> and sets the default values.
        /// </summary>
        public SettingsGetResponse_data() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="SettingsGetResponse_data"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static SettingsGetResponse_data CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new SettingsGetResponse_data();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"aggression", n => { Aggression = n.GetDoubleValue(); } },
                {"broadcaster_id", n => { BroadcasterId = n.GetStringValue(); } },
                {"bullying", n => { Bullying = n.GetDoubleValue(); } },
                {"disability", n => { Disability = n.GetDoubleValue(); } },
                {"misogyny", n => { Misogyny = n.GetDoubleValue(); } },
                {"moderator_id", n => { ModeratorId = n.GetStringValue(); } },
                {"overall_level", n => { OverallLevel = n.GetStringValue(); } },
                {"race_ethnicity_or_religion", n => { RaceEthnicityOrReligion = n.GetDoubleValue(); } },
                {"sex_based_terms", n => { SexBasedTerms = n.GetDoubleValue(); } },
                {"sexuality_sex_or_gender", n => { SexualitySexOrGender = n.GetDoubleValue(); } },
                {"swearing", n => { Swearing = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("aggression", Aggression);
            writer.WriteStringValue("broadcaster_id", BroadcasterId);
            writer.WriteDoubleValue("bullying", Bullying);
            writer.WriteDoubleValue("disability", Disability);
            writer.WriteDoubleValue("misogyny", Misogyny);
            writer.WriteStringValue("moderator_id", ModeratorId);
            writer.WriteStringValue("overall_level", OverallLevel);
            writer.WriteDoubleValue("race_ethnicity_or_religion", RaceEthnicityOrReligion);
            writer.WriteDoubleValue("sex_based_terms", SexBasedTerms);
            writer.WriteDoubleValue("sexuality_sex_or_gender", SexualitySexOrGender);
            writer.WriteDoubleValue("swearing", Swearing);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
