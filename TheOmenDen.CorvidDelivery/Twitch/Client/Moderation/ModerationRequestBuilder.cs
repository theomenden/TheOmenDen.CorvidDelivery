// <auto-generated/>
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System;
using TheOmenDen.CorvidDelivery.Twitch.Moderation.Automod;
using TheOmenDen.CorvidDelivery.Twitch.Moderation.Banned;
using TheOmenDen.CorvidDelivery.Twitch.Moderation.Bans;
using TheOmenDen.CorvidDelivery.Twitch.Moderation.Blocked_terms;
using TheOmenDen.CorvidDelivery.Twitch.Moderation.Channels;
using TheOmenDen.CorvidDelivery.Twitch.Moderation.Chat;
using TheOmenDen.CorvidDelivery.Twitch.Moderation.Enforcements;
using TheOmenDen.CorvidDelivery.Twitch.Moderation.Moderators;
using TheOmenDen.CorvidDelivery.Twitch.Moderation.Shield_mode;
using TheOmenDen.CorvidDelivery.Twitch.Moderation.Unban_requests;
namespace TheOmenDen.CorvidDelivery.Twitch.Moderation {
    /// <summary>
    /// Builds and executes requests for operations under \moderation
    /// </summary>
    public class ModerationRequestBuilder : BaseRequestBuilder {
        /// <summary>The automod property</summary>
        public AutomodRequestBuilder Automod { get =>
            new AutomodRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The banned property</summary>
        public BannedRequestBuilder Banned { get =>
            new BannedRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The bans property</summary>
        public BansRequestBuilder Bans { get =>
            new BansRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The blocked_terms property</summary>
        public Blocked_termsRequestBuilder Blocked_terms { get =>
            new Blocked_termsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The channels property</summary>
        public ChannelsRequestBuilder Channels { get =>
            new ChannelsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The chat property</summary>
        public ChatRequestBuilder Chat { get =>
            new ChatRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The enforcements property</summary>
        public EnforcementsRequestBuilder Enforcements { get =>
            new EnforcementsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The moderators property</summary>
        public ModeratorsRequestBuilder Moderators { get =>
            new ModeratorsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The shield_mode property</summary>
        public Shield_modeRequestBuilder Shield_mode { get =>
            new Shield_modeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The unban_requests property</summary>
        public Unban_requestsRequestBuilder Unban_requests { get =>
            new Unban_requestsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="ModerationRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ModerationRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/moderation", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new <see cref="ModerationRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ModerationRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/moderation", rawUrl) {
        }
    }
}
