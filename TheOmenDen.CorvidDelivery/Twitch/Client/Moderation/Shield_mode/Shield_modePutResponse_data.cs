// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace TheOmenDen.CorvidDelivery.Twitch.Moderation.Shield_mode {
    public class Shield_modePutResponse_data : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The is_active property</summary>
        public bool? IsActive { get; set; }
        /// <summary>The last_activated_at property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastActivatedAt { get; set; }
#nullable restore
#else
        public string LastActivatedAt { get; set; }
#endif
        /// <summary>The moderator_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ModeratorId { get; set; }
#nullable restore
#else
        public string ModeratorId { get; set; }
#endif
        /// <summary>The moderator_login property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ModeratorLogin { get; set; }
#nullable restore
#else
        public string ModeratorLogin { get; set; }
#endif
        /// <summary>The moderator_name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ModeratorName { get; set; }
#nullable restore
#else
        public string ModeratorName { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Shield_modePutResponse_data"/> and sets the default values.
        /// </summary>
        public Shield_modePutResponse_data() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Shield_modePutResponse_data"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Shield_modePutResponse_data CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Shield_modePutResponse_data();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"is_active", n => { IsActive = n.GetBoolValue(); } },
                {"last_activated_at", n => { LastActivatedAt = n.GetStringValue(); } },
                {"moderator_id", n => { ModeratorId = n.GetStringValue(); } },
                {"moderator_login", n => { ModeratorLogin = n.GetStringValue(); } },
                {"moderator_name", n => { ModeratorName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("is_active", IsActive);
            writer.WriteStringValue("last_activated_at", LastActivatedAt);
            writer.WriteStringValue("moderator_id", ModeratorId);
            writer.WriteStringValue("moderator_login", ModeratorLogin);
            writer.WriteStringValue("moderator_name", ModeratorName);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
