// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace TheOmenDen.CorvidDelivery.Twitch.Schedule.Segment {
    public class SegmentPatchResponse_data_segments : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The canceled_until property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CanceledUntil { get; set; }
#nullable restore
#else
        public string CanceledUntil { get; set; }
#endif
        /// <summary>The category property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public SegmentPatchResponse_data_segments_category? Category { get; set; }
#nullable restore
#else
        public SegmentPatchResponse_data_segments_category Category { get; set; }
#endif
        /// <summary>The end_time property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EndTime { get; set; }
#nullable restore
#else
        public string EndTime { get; set; }
#endif
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The is_recurring property</summary>
        public bool? IsRecurring { get; set; }
        /// <summary>The start_time property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StartTime { get; set; }
#nullable restore
#else
        public string StartTime { get; set; }
#endif
        /// <summary>The title property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="SegmentPatchResponse_data_segments"/> and sets the default values.
        /// </summary>
        public SegmentPatchResponse_data_segments() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="SegmentPatchResponse_data_segments"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static SegmentPatchResponse_data_segments CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new SegmentPatchResponse_data_segments();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"canceled_until", n => { CanceledUntil = n.GetStringValue(); } },
                {"category", n => { Category = n.GetObjectValue<SegmentPatchResponse_data_segments_category>(SegmentPatchResponse_data_segments_category.CreateFromDiscriminatorValue); } },
                {"end_time", n => { EndTime = n.GetStringValue(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"is_recurring", n => { IsRecurring = n.GetBoolValue(); } },
                {"start_time", n => { StartTime = n.GetStringValue(); } },
                {"title", n => { Title = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("canceled_until", CanceledUntil);
            writer.WriteObjectValue<SegmentPatchResponse_data_segments_category>("category", Category);
            writer.WriteStringValue("end_time", EndTime);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("is_recurring", IsRecurring);
            writer.WriteStringValue("start_time", StartTime);
            writer.WriteStringValue("title", Title);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
