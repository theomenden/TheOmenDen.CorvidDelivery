// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace TheOmenDen.CorvidDelivery.Twitch.Chat.Emotes {
    public class EmotesGetResponse_data : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The emote_set_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmoteSetId { get; set; }
#nullable restore
#else
        public string EmoteSetId { get; set; }
#endif
        /// <summary>The emote_type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmoteType { get; set; }
#nullable restore
#else
        public string EmoteType { get; set; }
#endif
        /// <summary>The format property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Format { get; set; }
#nullable restore
#else
        public List<string> Format { get; set; }
#endif
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The images property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public EmotesGetResponse_data_images? Images { get; set; }
#nullable restore
#else
        public EmotesGetResponse_data_images Images { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The scale property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Scale { get; set; }
#nullable restore
#else
        public List<string> Scale { get; set; }
#endif
        /// <summary>The theme_mode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ThemeMode { get; set; }
#nullable restore
#else
        public List<string> ThemeMode { get; set; }
#endif
        /// <summary>The tier property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Tier { get; set; }
#nullable restore
#else
        public string Tier { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="EmotesGetResponse_data"/> and sets the default values.
        /// </summary>
        public EmotesGetResponse_data() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="EmotesGetResponse_data"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static EmotesGetResponse_data CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new EmotesGetResponse_data();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"emote_set_id", n => { EmoteSetId = n.GetStringValue(); } },
                {"emote_type", n => { EmoteType = n.GetStringValue(); } },
                {"format", n => { Format = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"images", n => { Images = n.GetObjectValue<EmotesGetResponse_data_images>(EmotesGetResponse_data_images.CreateFromDiscriminatorValue); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"scale", n => { Scale = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"theme_mode", n => { ThemeMode = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"tier", n => { Tier = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("emote_set_id", EmoteSetId);
            writer.WriteStringValue("emote_type", EmoteType);
            writer.WriteCollectionOfPrimitiveValues<string>("format", Format);
            writer.WriteStringValue("id", Id);
            writer.WriteObjectValue<EmotesGetResponse_data_images>("images", Images);
            writer.WriteStringValue("name", Name);
            writer.WriteCollectionOfPrimitiveValues<string>("scale", Scale);
            writer.WriteCollectionOfPrimitiveValues<string>("theme_mode", ThemeMode);
            writer.WriteStringValue("tier", Tier);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
