// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace TheOmenDen.CorvidDelivery.Twitch.Teams {
    public class TeamsGetResponse_data : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The background_image_url property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BackgroundImageUrl { get; set; }
#nullable restore
#else
        public string BackgroundImageUrl { get; set; }
#endif
        /// <summary>The banner property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Banner { get; set; }
#nullable restore
#else
        public string Banner { get; set; }
#endif
        /// <summary>The created_at property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedAt { get; set; }
#nullable restore
#else
        public string CreatedAt { get; set; }
#endif
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The info property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Info { get; set; }
#nullable restore
#else
        public string Info { get; set; }
#endif
        /// <summary>The team_display_name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TeamDisplayName { get; set; }
#nullable restore
#else
        public string TeamDisplayName { get; set; }
#endif
        /// <summary>The team_name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TeamName { get; set; }
#nullable restore
#else
        public string TeamName { get; set; }
#endif
        /// <summary>The thumbnail_url property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ThumbnailUrl { get; set; }
#nullable restore
#else
        public string ThumbnailUrl { get; set; }
#endif
        /// <summary>The updated_at property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UpdatedAt { get; set; }
#nullable restore
#else
        public string UpdatedAt { get; set; }
#endif
        /// <summary>The users property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<TeamsGetResponse_data_users>? Users { get; set; }
#nullable restore
#else
        public List<TeamsGetResponse_data_users> Users { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="TeamsGetResponse_data"/> and sets the default values.
        /// </summary>
        public TeamsGetResponse_data() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="TeamsGetResponse_data"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static TeamsGetResponse_data CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new TeamsGetResponse_data();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"background_image_url", n => { BackgroundImageUrl = n.GetStringValue(); } },
                {"banner", n => { Banner = n.GetStringValue(); } },
                {"created_at", n => { CreatedAt = n.GetStringValue(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"info", n => { Info = n.GetStringValue(); } },
                {"team_display_name", n => { TeamDisplayName = n.GetStringValue(); } },
                {"team_name", n => { TeamName = n.GetStringValue(); } },
                {"thumbnail_url", n => { ThumbnailUrl = n.GetStringValue(); } },
                {"updated_at", n => { UpdatedAt = n.GetStringValue(); } },
                {"users", n => { Users = n.GetCollectionOfObjectValues<TeamsGetResponse_data_users>(TeamsGetResponse_data_users.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("background_image_url", BackgroundImageUrl);
            writer.WriteStringValue("banner", Banner);
            writer.WriteStringValue("created_at", CreatedAt);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("info", Info);
            writer.WriteStringValue("team_display_name", TeamDisplayName);
            writer.WriteStringValue("team_name", TeamName);
            writer.WriteStringValue("thumbnail_url", ThumbnailUrl);
            writer.WriteStringValue("updated_at", UpdatedAt);
            writer.WriteCollectionOfObjectValues<TeamsGetResponse_data_users>("users", Users);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
