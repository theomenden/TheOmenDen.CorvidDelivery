// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace TheOmenDen.CorvidDelivery.Twitch.Charity.Campaigns {
    public class CampaignsGetResponse_data : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The broadcaster_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BroadcasterId { get; set; }
#nullable restore
#else
        public string BroadcasterId { get; set; }
#endif
        /// <summary>The broadcaster_login property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BroadcasterLogin { get; set; }
#nullable restore
#else
        public string BroadcasterLogin { get; set; }
#endif
        /// <summary>The broadcaster_name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BroadcasterName { get; set; }
#nullable restore
#else
        public string BroadcasterName { get; set; }
#endif
        /// <summary>The charity_description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CharityDescription { get; set; }
#nullable restore
#else
        public string CharityDescription { get; set; }
#endif
        /// <summary>The charity_logo property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CharityLogo { get; set; }
#nullable restore
#else
        public string CharityLogo { get; set; }
#endif
        /// <summary>The charity_name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CharityName { get; set; }
#nullable restore
#else
        public string CharityName { get; set; }
#endif
        /// <summary>The charity_website property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CharityWebsite { get; set; }
#nullable restore
#else
        public string CharityWebsite { get; set; }
#endif
        /// <summary>The current_amount property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public CampaignsGetResponse_data_current_amount? CurrentAmount { get; set; }
#nullable restore
#else
        public CampaignsGetResponse_data_current_amount CurrentAmount { get; set; }
#endif
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The target_amount property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public CampaignsGetResponse_data_target_amount? TargetAmount { get; set; }
#nullable restore
#else
        public CampaignsGetResponse_data_target_amount TargetAmount { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="CampaignsGetResponse_data"/> and sets the default values.
        /// </summary>
        public CampaignsGetResponse_data() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="CampaignsGetResponse_data"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static CampaignsGetResponse_data CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CampaignsGetResponse_data();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"broadcaster_id", n => { BroadcasterId = n.GetStringValue(); } },
                {"broadcaster_login", n => { BroadcasterLogin = n.GetStringValue(); } },
                {"broadcaster_name", n => { BroadcasterName = n.GetStringValue(); } },
                {"charity_description", n => { CharityDescription = n.GetStringValue(); } },
                {"charity_logo", n => { CharityLogo = n.GetStringValue(); } },
                {"charity_name", n => { CharityName = n.GetStringValue(); } },
                {"charity_website", n => { CharityWebsite = n.GetStringValue(); } },
                {"current_amount", n => { CurrentAmount = n.GetObjectValue<CampaignsGetResponse_data_current_amount>(CampaignsGetResponse_data_current_amount.CreateFromDiscriminatorValue); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"target_amount", n => { TargetAmount = n.GetObjectValue<CampaignsGetResponse_data_target_amount>(CampaignsGetResponse_data_target_amount.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("broadcaster_id", BroadcasterId);
            writer.WriteStringValue("broadcaster_login", BroadcasterLogin);
            writer.WriteStringValue("broadcaster_name", BroadcasterName);
            writer.WriteStringValue("charity_description", CharityDescription);
            writer.WriteStringValue("charity_logo", CharityLogo);
            writer.WriteStringValue("charity_name", CharityName);
            writer.WriteStringValue("charity_website", CharityWebsite);
            writer.WriteObjectValue<CampaignsGetResponse_data_current_amount>("current_amount", CurrentAmount);
            writer.WriteStringValue("id", Id);
            writer.WriteObjectValue<CampaignsGetResponse_data_target_amount>("target_amount", TargetAmount);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
